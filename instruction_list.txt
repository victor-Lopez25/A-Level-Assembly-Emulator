LDM #n: Immediate addressing. Load the number n to ACC
LDD <address>: Direct Addressing. Load the contents of the location at the given address to ACC
LDI <address>: Indirect Addressing. The address to be used is the given address. Load the contents of this second address to ACC
LDX <address>: Indexed Addressing. Form the address from <address> + the contents of the index register. Copy the contents of this calculated address to ACC
LDR #n: Immediate Addressing. Load the number n to IX
STO <address>: Store the contents of ACC at the given address
STX <address>: Indexed Address. Form the address from <address> + the contents of the index register. Copy the contents from ACC to this calculated address
STI <address>: Indirect Addressing. The address to be used is at the given address. Store the contents of ACC at this second address
ADD <address>: Add the contents of the given address to the ACC
INC <register>: Add 1 to the contents of the register (ACC or IX)
DEC <register>: Substract 1 to the contents of the register (ACC or IX)
JMP <address>: Jump to the given address
CMP <address>: Compare the contents of ACC with the contents of <address>
CMP #n: Compare the contents of ACC with number n
JPE <address>: Following a compare instruction, jump to <address> if the compare was True
JPN <address>: Following a compare instruction, jump to <address> if the compare was False
INP: Key in a character and store its ASCII value in ACC
OUT: Output to the screen the ASCII value in ACC
AND #n: Bitwise AND operation of the contents of ACC with the operand
AND <address>: Bitwise AND operation of the content of ACC with the contents of <address>
XOR #n: Bitwise XOR operation of the contents of ACC with the operand
XOR <address>: Bitwise XOR operation of the content of ACC with the contents of <address>
OR #n: Bitwise OR operation of the contents of ACC with the operand
OR <address>: Bitwise OR operation of the content of ACC with the contents of <address>
LSL #n: Shift the bits in ACC n places to the left. Zeros are introduced on the right-hand end
LSR #n: Shift the bits in ACC n places to the right. Zeros are introduced on the left-hand end
END: Return control to the operating system
<label>: <opcode> <operand>: Labels an instruction
<label>: <data>: Gives a symbolic address <label> to the memory location with contents <data>

ACC denotes the Accumulator
IX denotes the Index Register
# denotes Immediate Addressing
B denotes a binary number, for example B00100101
& denotes a hexadecimal number, for example, &5F
<address> can be an absolute or a symbolic address

[
    <address> is a line number or a symbolic address
    data is straight up numbers
    BR is the base register
]

START: indicates the starting point of the program